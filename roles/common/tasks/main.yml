---
- name: Ensure hostname set
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname is match('(\d{1,3}\.){3}\d{1,3}')
  register: hostname
  tags: hostname

- name: Ensure hostname is in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }}.+$"
    line: "{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }}"
  register: hostname
  tags: hostname

- name: set timezone to UTC
  timezone:
    name: UTC
  register: timezone

- name: Disallow password authentication
  lineinfile: dest=/etc/ssh/sshd_config
    regexp="^PasswordAuthentication"
    line="PasswordAuthentication no"
    state=present
  notify: Restart ssh

- name: Disallow root SSH access
  lineinfile: dest=/etc/ssh/sshd_config
    regexp="^PermitRootLogin"
    line="PermitRootLogin no"
    state=present
  notify: Restart ssh

- name: set correct locale
  locale_gen:
    name: en_US.UTF-8
    state: present

- name: "adjust /boot/config.txt based on boot_config_lines"
  lineinfile:
    line: '{{ item }}'
    dest: /boot/config.txt
    regexp: "^{{ item }}"
  with_items: '{{ boot_config_lines }}'
  register: boot_config_lines

- name: Enabling cgroup options at boot
  copy:
    src: cmdline.txt
    dest: /boot/cmdline.txt
    owner: root
    group: root
    mode: 0755
  register: cmdline
  tags:
    - boot

- name: Add the inventory into /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ hostvars[item]['ansible_host'] }} {{item}}"
    state: present
  when: hostvars[item]['ansible_host'] is defined
  with_items:
    - "{{ groups['all'] }}"

- name: Disable Swap
  shell: dphys-swapfile swapoff && dphys-swapfile uninstall && update-rc.d dphys-swapfile remove
  ignore_errors: True

- name: apt-get update
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    cache_valid_time: 86400

- name: python-apt dependency
  shell: apt-get install -y python-apt
  args:
    warn: no

- name: apt-get upgrade
  apt:
    upgrade: full

- name: Determine if docker is installed
  stat:
    path: /usr/bin/docker
  register: docker_there
  ignore_errors: True

- name: Install Docker Pre-Reqs
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg2
    - software-properties-common
  when: docker_there.stat.exists == False

- name: Import Docker Repo Key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present
  when: docker_there.stat.exists == False

- name: Add and enable Docker Repository
  apt_repository:
    repo: deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable
    state: present
    filename: docker-ce
  when: docker_there.stat.exists == False

- name: apt-get update
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    cache_valid_time: 86400
  when: docker_there.stat.exists == False

- name: Install Docker
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - docker-ce={{ docker_ce_version }}
    - containerd.io
  when: docker_there.stat.exists == False
  register: docker_installed

- name: Lock docker version to {{ docker_ce_version}}
  command: /usr/bin/apt-mark hold docker-ce
  when: docker_installed.changed

- name: restart machine
  shell: sleep 2 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: true
  when: cmdline.changed or timezone.changed or hostname.changed or boot_config_lines.changed

- name: waiting for machine to come back
  local_action: wait_for port=22 host="{{ ansible_host|default(inventory_hostname) }}" delay=20 timeout=120
  become: false
  when: cmdline.changed or timezone.changed or hostname.changed or boot_config_lines.changed
